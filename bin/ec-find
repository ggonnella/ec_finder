#!/usr/bin/env python3

"""
Usage:
  ec-find [options] <input_file> <colnum>
  ec-find [options] <enzyme_name>
  ec-find update
  ec-find cleanup

Data file actions:
  update               Update enzyme data file if a new one is available:
  cleanup              Remove enzyme data file
                       (it will be downloaded on next run)

Arguments
  <input_file>         Path to input file.
  <colnum>             Column number with enzyme names, 1-based.

Options:
  -m, --min-score=<n>  Minimum score for fuzzy matches (default: 90)
  -s, --separator=SEP  Separator used in input file (default: tab)
  -h --help            Show this screen.
  --version            Show version.
"""

import docopt
import sys
from pathlib import Path
import ec_finder

def parse_min_score_arg(arguments):
  if arguments["--min-score"] is None:
    min_score = 90
  else:
    if not arguments["--min-score"].isdigit():
      sys.stderr.write("Minimum score must be an integer. Found: " +\
          arguments["--min-score"] + "\n")
      sys.exit(1)
    min_score = int(arguments["--min-score"])
    if min_score < 0 or min_score > 100:
      sys.stderr.write("Minimum score must be between 0 and 100. Found: " +\
          arguments["--min-score"] + "\n")
      sys.exit(1)
  return min_score

def parse_separator_arg(arguments):
  if arguments["--separator"] is None:
    separator = "\t"
  else:
    separator = arguments["--separator"]
  return separator

def parse_colnum_arg(arguments):
  if not arguments["<colnum>"].isdigit():
    sys.stderr.write("Column number must be an integer. Found: " +\
      arguments["<colnum>"] + "\n")
    sys.exit(1)
  colnum = int(arguments["<colnum>"]) - 1
  if colnum < 0:
    sys.stderr.write("Column number must be greater than 0. Found: " +\
        arguments["<colnum>"] + "\n")
    sys.exit(1)
  return colnum

def parse_input_file_arg(arguments):
  input_file = Path(arguments["<input_file>"])
  if not input_file.is_file():
    sys.stderr.write("Input file not found: " + str(input_file) + "\n")
    sys.exit(1)
  return input_file

def process_input_file(input_file, colnum, min_score, separator):
  with open(input_file) as f:
    for line in f:
        line = line.rstrip()
        columns = line.split(separator)
        if colnum < len(columns):
          enzyme_name = columns[colnum]
          ec_code_info = ec_finder.search(enzyme_name, min_score)
          yield ec_code_info + separator + line
        else:
          yield f"COLUMN_NOT_FOUND:{colnum+1}" + \
                  separator + separator + separator + line

if __name__ == '__main__':
  arguments = docopt.docopt(__doc__, version=ec_finder.__version__)
  if arguments["update"]:
    ec_finder.update()
  elif arguments["cleanup"]:
    ec_finder.cleanup()
  elif arguments["<enzyme_name>"]:
    print(ec_finder.search(arguments["<enzyme_name>"],
          parse_min_score_arg(arguments)))
  else:
    for line in process_input_file(
                  parse_input_file_arg(arguments),
                  parse_colnum_arg(arguments),
                  parse_min_score_arg(arguments),
                  parse_separator_arg(arguments)):
      print(line)
